{"version":3,"sources":["components/Modal.js","components/Page.js","App.js","serviceWorker.js","index.js"],"names":["Modal","full_screen_submit","e","a","document","querySelector","requestFullscreen","classList","remove","add","console","log","className","onClick","id","Page","startX","num","text","onTouchStart","target","style","transition","touches","clientX","onTouchMove","touch","change","transform","onTouchEnd","changedTouches","window","screen","width","nextElementSibling","App","map","page","index","key","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2PA4BeA,EA1BD,WACZ,IAAMC,EAAkB,uCAAG,WAAMC,GAAN,SAAAC,EAAA,+EAEFC,SAASC,cAAc,QAAQC,oBAF7B,cAGvBF,SAASC,cAAc,qBAAqBE,UAAUC,OAAO,UAC7DJ,SAASC,cAAc,WAAWE,UAAUE,IAAI,QAJzB,gDAMvBC,QAAQC,IAAR,MANuB,yDAAH,sDAcxB,OACE,yBAAKC,UAAU,2BACb,yBAAKA,UAAU,kBACb,sMACA,4BAAQC,QAASZ,EAAoBa,GAAG,sBAAxC,MACA,4BAAQD,QAVa,WACzBT,SAASC,cAAc,qBAAqBE,UAAUC,OAAO,UAC7DJ,SAASC,cAAc,WAAWE,UAAUE,IAAI,SAQPK,GAAG,sBAAxC,SCsBOC,EA1CF,SAAC,GAAmB,IACzBC,EADQC,EAAgB,EAAhBA,IAAKC,EAAW,EAAXA,KA8BnB,OACE,6BACEC,aA9BqB,SAACjB,GACxBA,EAAEkB,OAAOC,MAAMC,WAAa,wBAC5BN,EAASd,EAAEqB,QAAQ,GAAGC,SA6BpBC,YA3BoB,SAACvB,GACvB,IAAMwB,EAAQxB,EAAEqB,QAAQ,GAClBI,EAASX,EAASU,EAAMF,QAE1BG,EAAS,IAGbzB,EAAEkB,OAAOC,MAAMO,UAAf,sBAAmD,EAAVD,EAAzC,SAqBEE,WAnBmB,SAAC3B,GACtBA,EAAEkB,OAAOC,MAAMC,WAAa,wBACbN,EAASd,EAAE4B,eAAe,GAAGN,QAC/BO,OAAOC,OAAOC,MAAQ,EAGjC/B,EAAEkB,OAAOC,MAAMO,UAAf,gBAEA1B,EAAEkB,OAAOC,MAAMO,UAAf,mBAEK1B,EAAEkB,OAAOc,qBAUdtB,UAAS,oBAAeK,IAExB,4BAAKC,KCrBIiB,MAXf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,MACC,CAAC,SAAU,SAAU,SAAU,UAAUwB,KAAI,SAACC,EAAMC,GAAP,OAC5C,kBAAC,EAAD,CAAMC,IAAKD,EAAOrB,IAAKqB,EAAQ,EAAGpB,KAAMmB,SCA5BG,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1C,SAAS2C,eAAe,QDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.14ce6e39.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Modal = () => {\r\n  const full_screen_submit = async e => {\r\n    try {\r\n      const result = await document.querySelector(\"body\").requestFullscreen();\r\n      document.querySelector(\".modal__container\").classList.remove(\"active\");\r\n      document.querySelector(\".loader\").classList.add(\"play\");\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  const full_screen_reject = () => {\r\n    document.querySelector(\".modal__container\").classList.remove(\"active\");\r\n    document.querySelector(\".loader\").classList.add(\"play\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"modal__container active\">\r\n      <div className=\"modal__content\">\r\n        <h3>Открыть в полноекранном режиме?</h3>\r\n        <button onClick={full_screen_submit} id=\"full_screen_submit\">OK</button>\r\n        <button onClick={full_screen_reject} id=\"full_screen_cancel\">NO</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;","import React from \"react\";\r\n\r\nconst Page = ({ num, text }) => {\r\n    let startX;\r\n  const handleStartTouch = (e) => {\r\n    e.target.style.transition = \"transform 0.1s linear\";\r\n    startX = e.touches[0].clientX;\r\n  };\r\n  const handleMoveTouch = (e) => {\r\n    const touch = e.touches[0];\r\n    const change = startX - touch.clientX;\r\n\r\n    if (change < 0) {\r\n      return;\r\n    }\r\n    e.target.style.transform = `translateX(${change * -1}px)`;\r\n  };\r\n  const handleEndTouch = (e) => {\r\n    e.target.style.transition = \"transform 0.3s linear\";\r\n    const change = startX - e.changedTouches[0].clientX;\r\n    const half = window.screen.width / 3;\r\n    \r\n    if (change < half) {\r\n      e.target.style.transform = `translate(0)`;\r\n    } else {\r\n      e.target.style.transform = `translate(-100%)`;\r\n\r\n      if (!e.target.nextElementSibling) {\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section\r\n      onTouchStart={handleStartTouch}\r\n      onTouchMove={handleMoveTouch}\r\n      onTouchEnd={handleEndTouch}\r\n      className={`page page_${num}`}\r\n    >\r\n      <h3>{text}</h3>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n","import React from \"react\";\nimport \"./main.min.css\";\n\n//components\nimport Modal from \"./components/Modal\";\nimport Page from \"./components/Page\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Modal />\n      {[\"Page 1\", \"Page 2\", \"Page 3\", \"Page 4\"].map((page, index) => (\n        <Page key={index} num={index + 1} text={page} />\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('app')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}